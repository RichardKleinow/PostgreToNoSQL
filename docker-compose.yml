version: '3.9'

services:

  postgres:
    container_name: postgres_container
    image: postgres:latest
    restart: unless-stopped
    env_file: ./secrets/secrets_postgres.txt
    volumes:
        - ./postgres:/data/dump
        - ./postgres/init-dump.sh:/docker-entrypoint-initdb.d/init-dump.sh
    ports:
      - "5432:5432"
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 5s
        timeout: 5s
        retries: 10
        start_period: 30s
    networks:
      - postgres
      
      
  pgadmin:
    container_name: pgadmin_container
    build: ./pgadmin/.
    image: pgadmin
    restart: unless-stopped
    env_file: ./secrets/secrets_pgadmin.txt
    volumes:
        - ./pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
        postgres:
            condition: service_healthy
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - postgres 

    
  mongo:
    container_name: mongo_container
    image: mongo:latest
    restart: unless-stopped
    env_file: ./secrets/secrets_mongo.txt
    healthcheck:
        test: echo 'db.runCommand("ping").ok' | mongosh mongo:27017/local --quiet
        interval: 5s
        timeout: 5s
        retries: 10
        start_period: 30s
    ports:
      - 27017:27017
    networks:
      - postgres

  mongo-client:
    container_name: mongoclient_container
    image: mongoclient/mongoclient
    restart: unless-stopped
    env_file: ./secrets/secrets_mongoclient.txt
    depends_on:
        mongo:
            condition: service_healthy
    ports:
     - "${PORT:-3000}:3000"
    networks:
      - postgres
      
      
  python:
    container_name: python_container
    build: ./python/.
    restart: unless-stopped
    image: pythonscript_container
    volumes:
    - ./python/src/transfer.py:/home/user/transfer.py
    - ./python/src/database.ini:/home/user/database.ini
    depends_on:
        postgres:
            condition: service_healthy
        mongo:
            condition: service_healthy
    networks:
      - postgres
    

networks:
  postgres:
    driver: bridge